eventbus:
    ## <port> to listen on for HTTP request
    http_address: "0.0.0.0:8091"

    ## http request url regexp pattern
    url_pattern: /(v\d+)/(\w+)/?(\w+)?/?(\w+)?
    
    ## retry policy for failed event: 1 - count policy; 2 - timeout policy
    retry_policy: 1

    ## max retry count for failed event
    max_retry_count: 10

    ## duration time of retry interval for failed event
    retry_interval: "5s"

    ## max retry timeout for failed event
    max_retry_timeout: "2h"

driver:
    - notifier
    - queuer

log:
    # for dev mode, we show the call function in the logfile
    # otherwise we only record log message
    mode: dev

    ## log verbosity level: debug, info, warn, error, or fatal
    level: info

    ## log output prefix
    prefix: "[eventbus-node]"

    ## path to log file
    path: "/opt/ewangplay/eventbus/log"

    ## max size per log file before rolling (megabytes)
    max_size: 100

    ## rotate log file daily
    rotate_daily: false

    ## max age per log file (days)
    max_age: 30

pprof:
    ## Whether to enable the pprof for debugging
    enable: true

    ## pprof debug server address
    address: "0.0.0.0:6060"

redis:
    ## whether to enable redis service
    enable: true

    # whether we connect to a redis cluster, default is false
    cluster: false

    # use , to split redis nodes if we connect to a cluster
    # address: "127.0.0.1:7001"
    address: "redis0:6379"

    ## redis connection credential
    credential: "zhu88jie"

    ## maximum number of idle connections in the pool.
    max_idle: 30

    ## close connections after remaining idle for this duration
    idle_timeout: 1m

nsq:
    ## whether to enable nsq service
    enable: true

    ## <addr>:<port> to listen on for TCP clients
    tcp_address: "0.0.0.0:4150"

    ## <addr>:<port> to listen on for HTTP clients
    http_address: "0.0.0.0:4151"

    ## <addr>:<port> to listen on for HTTPS clients
    # https_address: "0.0.0.0:4152"
 
    ## address that will be registered with lookupd (defaults to the OS hostname)
    # broadcast_address: ""

    ## cluster of nsqlookupd TCP addresses
    lookupd_tcp_addresses: ["127.0.0.1:4160"]

    ## duration to wait before HTTP client connection timeout
    http_client_connect_timeout: "2s"

    ## duration to wait before HTTP client request timeout
    http_client_request_timeout: "5s"

    ## path to store disk-backed messages
    data_path: "/opt/ewangplay/eventbus/data"

    ## number of messages to keep in memory (per topic/channel)
    mem_queue_size: 10000

    ## number of bytes per diskqueue file before rolling
    max_bytes_per_file: 104857600

    ## number of messages per diskqueue fsync
    sync_every: 2500

    ## duration of time per diskqueue fsync (time.Duration)
    sync_timeout: "2s"

    ## duration to wait before auto-requeing a message
    msg_timeout: "60s"

    ## maximum duration before a message will timeout
    max_msg_timeout: "15m"

    ## maximum size of a single message in bytes
    max_msg_size: 1024768

    ## maximum requeuing timeout for a message
    max_req_timeout: "1h"

    ## maximum size of a single command body
    max_body_size: 5123840

    ## maximum client configurable duration of time between client heartbeats
    max_heartbeat_interval: "60s"

    ## maximum RDY count for a client
    max_rdy_count: 2500

    ## maximum client configurable size (in bytes) for a client output buffer
    max_output_buffer_size: 65536

    ## maximum client configurable duration of time between flushing to a client (time.Duration)
    max_output_buffer_timeout: "1s"

    ## UDP <addr>:<port> of a statsd daemon for pushing stats
    # statsd_address: "127.0.0.1:8125"

    ## prefix used for keys sent to statsd (%s for host replacement)
    statsd_prefix: "nsq.%s"

    ## duration between pushing to statsd (time.Duration)
    statsd_interval: "60s"

    ## toggle sending memory and GC stats to statsd
    statsd_mem_stats: true

    ## message processing time percentiles to keep track of (float)
    e2e_processing_latency_percentiles: [100.0,99.0,95.0]

    ## calculate end to end latency quantiles for this duration of time (time.Duration)
    e2e_processing_latency_window_time: "10m"

    ## path to certificate file
    tls_cert: ""

    ## path to private key file
    tls_key: ""

    ## set policy on client certificate (require - client must provide certificate,
    ##  require-verify - client must provide verifiable signed certificate)
    # tls_client_auth_policy: "require-verify"

    ## set custom root Certificate Authority
    # tls_root_ca_file: ""

    ## require client TLS upgrades
    tls_required: false

    ## minimum TLS version ("ssl3.0", "tls1.0," "tls1.1", "tls1.2")
    tls_min_version: ""

    ## enable deflate feature negotiation (client compression)
    deflate: true

    ## max deflate compression level a client can negotiate (> values == > nsqd CPU usage)
    max_deflate_level: 6

    ## enable snappy feature negotiation (client compression)
    snappy: true
